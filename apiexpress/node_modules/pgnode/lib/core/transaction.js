"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancelTransaction = exports.commitTransaction = exports.beginTransaction = void 0;
const client_1 = require("./client");
function getTxId(client) {
    return __awaiter(this, void 0, void 0, function* () {
        const { rows: [{ txid }], } = yield client.query(`SELECT txid_current() AS "txid"`);
        return txid;
    });
}
/**
 * How have we implemented transaction - with database transaction or with a
 * savepoint
 */
var TransactionMode;
(function (TransactionMode) {
    TransactionMode[TransactionMode["Transaction"] = 0] = "Transaction";
    TransactionMode[TransactionMode["Savepoint"] = 1] = "Savepoint";
})(TransactionMode || (TransactionMode = {}));
function beginTransaction({ client, clientMode }) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (clientMode) {
            case client_1.ClientMode.Connected: /**
             * If it's a client that we connected, we can be sure we can use it for a
             * transaction
             */
                {
                    yield client.query(`BEGIN`);
                    return TransactionMode.Transaction;
                }
            case client_1.ClientMode.Provided: /**
             * If it's a client that has been provided to us, we have to check if we
             * actually start a new transaction, and revert to savepoints
             */
                {
                    const preBeginTxId = yield getTxId(client);
                    yield client.query(`BEGIN`);
                    const postBeginTxId = yield getTxId(client);
                    const transactionMode = preBeginTxId !== postBeginTxId ? TransactionMode.Transaction : TransactionMode.Savepoint;
                    if (transactionMode === TransactionMode.Savepoint) {
                        yield client.query(`SAVEPOINT pg_tx`);
                    }
                    return transactionMode;
                }
        }
    });
}
exports.beginTransaction = beginTransaction;
function commitTransaction({ client, transactionMode }) {
    switch (transactionMode) {
        case TransactionMode.Transaction:
            return client.query(`COMMIT`);
        case TransactionMode.Savepoint:
            return client.query(`RELEASE SAVEPOINT pg_tx`);
    }
}
exports.commitTransaction = commitTransaction;
function cancelTransaction({ client, transactionMode }) {
    return __awaiter(this, void 0, void 0, function* () {
        switch (transactionMode) {
            case TransactionMode.Transaction:
                return client.query(`ROLLBACK`);
            case TransactionMode.Savepoint:
                yield client.query(`ROLLBACK TO SAVEPOINT pg_tx`);
                yield client.query(`RELEASE SAVEPOINT pg_tx`);
                break;
        }
    });
}
exports.cancelTransaction = cancelTransaction;
