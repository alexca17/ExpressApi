"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.releaseClient = exports.getClient = exports.ClientMode = void 0;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isPoolClient(p) {
    return typeof p['release'] === 'function';
}
/** Whether we got a ready client, or connected it ourselves */
var ClientMode;
(function (ClientMode) {
    ClientMode[ClientMode["Provided"] = 0] = "Provided";
    ClientMode[ClientMode["Connected"] = 1] = "Connected";
})(ClientMode = exports.ClientMode || (exports.ClientMode = {}));
function getClient(pg) {
    return __awaiter(this, void 0, void 0, function* () {
        if (isPoolClient(pg)) {
            return { client: pg, clientMode: ClientMode.Provided };
        }
        else {
            return {
                client: yield pg.connect(),
                clientMode: ClientMode.Connected,
            };
        }
    });
}
exports.getClient = getClient;
function releaseClient({ client, clientMode }) {
    if (clientMode === ClientMode.Connected) {
        client.release();
    }
}
exports.releaseClient = releaseClient;
