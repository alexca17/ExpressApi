"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const proxy_client_1 = require("./proxy_client");
const transaction_1 = require("./transaction");
/**
 * @param pg node postgres pool
 * @param callback callback that will use provided transaction client
 * @param forceRollback force rollback even without errors - useful for tests
 * @returns
 */
function tx(pg, callback, forceRollback) {
    return __awaiter(this, void 0, void 0, function* () {
        const { client, clientMode } = yield (0, client_1.getClient)(pg);
        const transactionMode = yield (0, transaction_1.beginTransaction)({ client, clientMode });
        try {
            let result;
            const proxyClient = new proxy_client_1.ProxyClient(client);
            try {
                result = yield callback(proxyClient);
            }
            catch (e) {
                yield (0, transaction_1.cancelTransaction)({ client, transactionMode });
                throw e;
            }
            finally {
                proxyClient.proxyRelease();
            }
            if (forceRollback) {
                yield (0, transaction_1.cancelTransaction)({ client, transactionMode });
            }
            else {
                yield (0, transaction_1.commitTransaction)({ client, transactionMode });
            }
            return result;
        }
        finally {
            (0, client_1.releaseClient)({ client, clientMode });
        }
    });
}
exports.default = tx;
